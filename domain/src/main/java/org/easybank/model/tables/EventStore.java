/*
 * This file is generated by jOOQ.
 */
package org.easybank.model.tables;


import java.util.Arrays;
import java.util.List;

import org.easybank.model.DefaultSchema;
import org.easybank.model.tables.records.EventStoreRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventStore extends TableImpl<EventStoreRecord> {

    private static final long serialVersionUID = -1758852566;

    /**
     * The reference instance of <code>EVENT_STORE</code>
     */
    public static final EventStore EVENT_STORE = new EventStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventStoreRecord> getRecordType() {
        return EventStoreRecord.class;
    }

    /**
     * The column <code>EVENT_STORE.EVENT_ID</code>.
     */
    public final TableField<EventStoreRecord, Long> EVENT_ID = createField(DSL.name("EVENT_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>EVENT_STORE.AGGREGATE_ID</code>.
     */
    public final TableField<EventStoreRecord, String> AGGREGATE_ID = createField(DSL.name("AGGREGATE_ID"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>EVENT_STORE.AGGREGATE_VERSION</code>.
     */
    public final TableField<EventStoreRecord, Integer> AGGREGATE_VERSION = createField(DSL.name("AGGREGATE_VERSION"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EVENT_STORE.EVENT_TYPE</code>.
     */
    public final TableField<EventStoreRecord, String> EVENT_TYPE = createField(DSL.name("EVENT_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>EVENT_STORE.EVENT_DATA</code>.
     */
    public final TableField<EventStoreRecord, String> EVENT_DATA = createField(DSL.name("EVENT_DATA"), org.jooq.impl.SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>EVENT_STORE.EVENT_TIMESTAMP</code>.
     */
    public final TableField<EventStoreRecord, Long> EVENT_TIMESTAMP = createField(DSL.name("EVENT_TIMESTAMP"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>EVENT_STORE</code> table reference
     */
    public EventStore() {
        this(DSL.name("EVENT_STORE"), null);
    }

    /**
     * Create an aliased <code>EVENT_STORE</code> table reference
     */
    public EventStore(String alias) {
        this(DSL.name(alias), EVENT_STORE);
    }

    /**
     * Create an aliased <code>EVENT_STORE</code> table reference
     */
    public EventStore(Name alias) {
        this(alias, EVENT_STORE);
    }

    private EventStore(Name alias, Table<EventStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventStore(Name alias, Table<EventStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EventStoreRecord, Long> getIdentity() {
        return Internal.createIdentity(EventStore.EVENT_STORE, EventStore.EVENT_STORE.EVENT_ID);
    }

    @Override
    public UniqueKey<EventStoreRecord> getPrimaryKey() {
        return Internal.createUniqueKey(EventStore.EVENT_STORE, "PK_EVENT_STORE", new TableField[] { EventStore.EVENT_STORE.EVENT_ID }, true);
    }

    @Override
    public List<UniqueKey<EventStoreRecord>> getKeys() {
        return Arrays.<UniqueKey<EventStoreRecord>>asList(
              Internal.createUniqueKey(EventStore.EVENT_STORE, "PK_EVENT_STORE", new TableField[] { EventStore.EVENT_STORE.EVENT_ID }, true)
        );
    }

    @Override
    public EventStore as(String alias) {
        return new EventStore(DSL.name(alias), this);
    }

    @Override
    public EventStore as(Name alias) {
        return new EventStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventStore rename(String name) {
        return new EventStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventStore rename(Name name) {
        return new EventStore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Integer, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
