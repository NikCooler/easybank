/*
 * This file is generated by jOOQ.
 */
package org.easybank.model.tables.records;


import org.easybank.aggregate.UserId;
import org.easybank.model.tables.User;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record2<UserId, String> {

    private static final long serialVersionUID = -651921019;

    /**
     * Setter for <code>USER.USER_ID</code>.
     */
    public UserRecord setUserId(UserId value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>USER.USER_ID</code>.
     */
    public UserId getUserId() {
        return (UserId) get(0);
    }

    /**
     * Setter for <code>USER.EMAIL</code>.
     */
    public UserRecord setEmail(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>USER.EMAIL</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UserId> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UserId, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UserId, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UserId> field1() {
        return User.USER.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.EMAIL;
    }

    @Override
    public UserId component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public UserId value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public UserRecord value1(UserId value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public UserRecord values(UserId value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(UserId userId, String email) {
        super(User.USER);

        set(0, userId);
        set(1, email);
    }
}
