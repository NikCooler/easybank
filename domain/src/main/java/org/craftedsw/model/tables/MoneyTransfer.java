/*
 * This file is generated by jOOQ.
 */
package org.craftedsw.model.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.craftedsw.aggregate.TransactionId;
import org.craftedsw.aggregate.TransactionId.JooqTransactionIdConverter;
import org.craftedsw.aggregate.UserId;
import org.craftedsw.aggregate.UserId.JooqUserIdConverter;
import org.craftedsw.model.DefaultSchema;
import org.craftedsw.model.tables.records.MoneyTransferRecord;
import org.craftedsw.type.Currency;
import org.craftedsw.type.TransferStatus;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MoneyTransfer extends TableImpl<MoneyTransferRecord> {

    private static final long serialVersionUID = -1969782719;

    /**
     * The reference instance of <code>MONEY_TRANSFER</code>
     */
    public static final MoneyTransfer MONEY_TRANSFER = new MoneyTransfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoneyTransferRecord> getRecordType() {
        return MoneyTransferRecord.class;
    }

    /**
     * The column <code>MONEY_TRANSFER.TRANSACTION_ID</code>.
     */
    public final TableField<MoneyTransferRecord, TransactionId> TRANSACTION_ID = createField(DSL.name("TRANSACTION_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "", new JooqTransactionIdConverter());

    /**
     * The column <code>MONEY_TRANSFER.TRANSFERRED_FROM</code>.
     */
    public final TableField<MoneyTransferRecord, UserId> TRANSFERRED_FROM = createField(DSL.name("TRANSFERRED_FROM"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "", new JooqUserIdConverter());

    /**
     * The column <code>MONEY_TRANSFER.TRANSFERRED_TO</code>.
     */
    public final TableField<MoneyTransferRecord, UserId> TRANSFERRED_TO = createField(DSL.name("TRANSFERRED_TO"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "", new JooqUserIdConverter());

    /**
     * The column <code>MONEY_TRANSFER.STATUS</code>.
     */
    public final TableField<MoneyTransferRecord, TransferStatus> STATUS = createField(DSL.name("STATUS"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.String, org.craftedsw.type.TransferStatus>(java.lang.String.class, org.craftedsw.type.TransferStatus.class));

    /**
     * The column <code>MONEY_TRANSFER.CURRENCY</code>.
     */
    public final TableField<MoneyTransferRecord, Currency> CURRENCY = createField(DSL.name("CURRENCY"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.String, org.craftedsw.type.Currency>(java.lang.String.class, org.craftedsw.type.Currency.class));

    /**
     * The column <code>MONEY_TRANSFER.VALUE</code>.
     */
    public final TableField<MoneyTransferRecord, BigDecimal> VALUE = createField(DSL.name("VALUE"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>MONEY_TRANSFER.ERROR_MESSAGE</code>.
     */
    public final TableField<MoneyTransferRecord, String> ERROR_MESSAGE = createField(DSL.name("ERROR_MESSAGE"), org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * Create a <code>MONEY_TRANSFER</code> table reference
     */
    public MoneyTransfer() {
        this(DSL.name("MONEY_TRANSFER"), null);
    }

    /**
     * Create an aliased <code>MONEY_TRANSFER</code> table reference
     */
    public MoneyTransfer(String alias) {
        this(DSL.name(alias), MONEY_TRANSFER);
    }

    /**
     * Create an aliased <code>MONEY_TRANSFER</code> table reference
     */
    public MoneyTransfer(Name alias) {
        this(alias, MONEY_TRANSFER);
    }

    private MoneyTransfer(Name alias, Table<MoneyTransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private MoneyTransfer(Name alias, Table<MoneyTransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MoneyTransferRecord> getPrimaryKey() {
        return Internal.createUniqueKey(MoneyTransfer.MONEY_TRANSFER, "PK_MONEY_TRANSFER", new TableField[]{MoneyTransfer.MONEY_TRANSFER.TRANSACTION_ID}, true);
    }

    @Override
    public List<UniqueKey<MoneyTransferRecord>> getKeys() {
        return Arrays.<UniqueKey<MoneyTransferRecord>>asList(
                Internal.createUniqueKey(MoneyTransfer.MONEY_TRANSFER, "PK_MONEY_TRANSFER", new TableField[]{MoneyTransfer.MONEY_TRANSFER.TRANSACTION_ID}, true)
        );
    }

    @Override
    public MoneyTransfer as(String alias) {
        return new MoneyTransfer(DSL.name(alias), this);
    }

    @Override
    public MoneyTransfer as(Name alias) {
        return new MoneyTransfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTransfer rename(String name) {
        return new MoneyTransfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTransfer rename(Name name) {
        return new MoneyTransfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<TransactionId, UserId, UserId, TransferStatus, Currency, BigDecimal, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
