/*
 * This file is generated by jOOQ.
 */
package org.craftedsw.model.tables.records;


import java.math.BigDecimal;

import org.craftedsw.aggregate.TransactionId;
import org.craftedsw.aggregate.UserId;
import org.craftedsw.model.tables.MoneyTransfer;
import org.craftedsw.type.Currency;
import org.craftedsw.type.TransferStatus;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoneyTransferRecord extends UpdatableRecordImpl<MoneyTransferRecord> implements Record7<TransactionId, UserId, UserId, TransferStatus, Currency, BigDecimal, String> {

    private static final long serialVersionUID = 568495095;

    /**
     * Setter for <code>MONEY_TRANSFER.TRANSACTION_ID</code>.
     */
    public MoneyTransferRecord setTransactionId(TransactionId value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.TRANSACTION_ID</code>.
     */
    public TransactionId getTransactionId() {
        return (TransactionId) get(0);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.TRANSFERRED_FROM</code>.
     */
    public MoneyTransferRecord setTransferredFrom(UserId value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.TRANSFERRED_FROM</code>.
     */
    public UserId getTransferredFrom() {
        return (UserId) get(1);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.TRANSFERRED_TO</code>.
     */
    public MoneyTransferRecord setTransferredTo(UserId value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.TRANSFERRED_TO</code>.
     */
    public UserId getTransferredTo() {
        return (UserId) get(2);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.STATUS</code>.
     */
    public MoneyTransferRecord setStatus(TransferStatus value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.STATUS</code>.
     */
    public TransferStatus getStatus() {
        return (TransferStatus) get(3);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.CURRENCY</code>.
     */
    public MoneyTransferRecord setCurrency(Currency value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.CURRENCY</code>.
     */
    public Currency getCurrency() {
        return (Currency) get(4);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.VALUE</code>.
     */
    public MoneyTransferRecord setValue(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.VALUE</code>.
     */
    public BigDecimal getValue() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>MONEY_TRANSFER.ERROR_MESSAGE</code>.
     */
    public MoneyTransferRecord setErrorMessage(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>MONEY_TRANSFER.ERROR_MESSAGE</code>.
     */
    public String getErrorMessage() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<TransactionId> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<TransactionId, UserId, UserId, TransferStatus, Currency, BigDecimal, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<TransactionId, UserId, UserId, TransferStatus, Currency, BigDecimal, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<TransactionId> field1() {
        return MoneyTransfer.MONEY_TRANSFER.TRANSACTION_ID;
    }

    @Override
    public Field<UserId> field2() {
        return MoneyTransfer.MONEY_TRANSFER.TRANSFERRED_FROM;
    }

    @Override
    public Field<UserId> field3() {
        return MoneyTransfer.MONEY_TRANSFER.TRANSFERRED_TO;
    }

    @Override
    public Field<TransferStatus> field4() {
        return MoneyTransfer.MONEY_TRANSFER.STATUS;
    }

    @Override
    public Field<Currency> field5() {
        return MoneyTransfer.MONEY_TRANSFER.CURRENCY;
    }

    @Override
    public Field<BigDecimal> field6() {
        return MoneyTransfer.MONEY_TRANSFER.VALUE;
    }

    @Override
    public Field<String> field7() {
        return MoneyTransfer.MONEY_TRANSFER.ERROR_MESSAGE;
    }

    @Override
    public TransactionId component1() {
        return getTransactionId();
    }

    @Override
    public UserId component2() {
        return getTransferredFrom();
    }

    @Override
    public UserId component3() {
        return getTransferredTo();
    }

    @Override
    public TransferStatus component4() {
        return getStatus();
    }

    @Override
    public Currency component5() {
        return getCurrency();
    }

    @Override
    public BigDecimal component6() {
        return getValue();
    }

    @Override
    public String component7() {
        return getErrorMessage();
    }

    @Override
    public TransactionId value1() {
        return getTransactionId();
    }

    @Override
    public UserId value2() {
        return getTransferredFrom();
    }

    @Override
    public UserId value3() {
        return getTransferredTo();
    }

    @Override
    public TransferStatus value4() {
        return getStatus();
    }

    @Override
    public Currency value5() {
        return getCurrency();
    }

    @Override
    public BigDecimal value6() {
        return getValue();
    }

    @Override
    public String value7() {
        return getErrorMessage();
    }

    @Override
    public MoneyTransferRecord value1(TransactionId value) {
        setTransactionId(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value2(UserId value) {
        setTransferredFrom(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value3(UserId value) {
        setTransferredTo(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value4(TransferStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value5(Currency value) {
        setCurrency(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value6(BigDecimal value) {
        setValue(value);
        return this;
    }

    @Override
    public MoneyTransferRecord value7(String value) {
        setErrorMessage(value);
        return this;
    }

    @Override
    public MoneyTransferRecord values(TransactionId value1, UserId value2, UserId value3, TransferStatus value4, Currency value5, BigDecimal value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MoneyTransferRecord
     */
    public MoneyTransferRecord() {
        super(MoneyTransfer.MONEY_TRANSFER);
    }

    /**
     * Create a detached, initialised MoneyTransferRecord
     */
    public MoneyTransferRecord(TransactionId transactionId, UserId transferredFrom, UserId transferredTo, TransferStatus status, Currency currency, BigDecimal value, String errorMessage) {
        super(MoneyTransfer.MONEY_TRANSFER);

        set(0, transactionId);
        set(1, transferredFrom);
        set(2, transferredTo);
        set(3, status);
        set(4, currency);
        set(5, value);
        set(6, errorMessage);
    }
}
